syntax = "proto3";
import "google/protobuf/timestamp.proto";
package grpc;

service RpcService {
    rpc isReady(ReadyRequest) returns (ReadyResponse);
    rpc updateVertiports(updateVertiportsRequest) returns (UpdateResponse);
    rpc updateWaypoints(updateWaypointsRequest) returns (UpdateResponse);
    rpc updateZones(UpdateZonesRequest) returns (UpdateResponse);
    rpc updateFlightPath(UpdateFlightPathRequest) returns (UpdateResponse);
    rpc bestPath(BestPathRequest) returns (BestPathResponse);
    rpc checkIntersection(CheckIntersectionRequest) returns (CheckIntersectionResponse);
    rpc getFlights(GetFlightsRequest) returns (GetFlightsResponse);
}

// The nodes involved in the best path request
enum NodeType {
    // Vertiport
    VERTIPORT = 0;

    // Waypoint
    WAYPOINT = 1;

    // Aircraft
    AIRCRAFT = 2;
}

// Ready Request object
message ReadyRequest {
    // No arguments
}

// Ready Response object
message ReadyResponse {
    // True if ready
    bool ready = 1;
}

// General update response object
message UpdateResponse {
    // True if updated
    bool updated = 1;
}

// Geospatial Coordinates
message Coordinates {
    // Latitude Coordinate
    double latitude = 1;

    // Longitude Coordinate
    double longitude = 2;
}

// Vertiport Type
message Vertiport {
    // Unique Arrow ID
    string identifier = 1;

    // Vertiport Polygon
    repeated Coordinates vertices = 2;

    // Altitude of this vertiport
    float altitude_meters = 3;

    // Vertiport label
    optional string label = 4;

    // Network Timestamp
    google.protobuf.Timestamp timestamp_network = 5;
}

// Waypoint Type
message Waypoint {
    // Unique identifier
    string identifier = 1;

    // Latitude Coordinate
    Coordinates location = 2;
}

// Update Vertiports Request object
message updateVertiportsRequest {
    // Nodes to update
    repeated Vertiport vertiports = 1;
}

// Update Waypoints Request object
message updateWaypointsRequest {
    // Nodes to update
    repeated Waypoint waypoints = 1;
}

// Airspace Zone Type
enum ZoneType {
    // Vertiport
    PORT = 0;

    // Restriction
    RESTRICTION = 1;
}

// Points in space used for routing (waypoints, vertiports, etc.)
message Zone {
    // Unique identifier (NOTAM id, etc.)
    string identifier = 1;

    // Zone Type
    ZoneType zone_type = 2;

    // Vertices bounding the No-Fly Zone
    // The first vertex should match the end vertex (closed shape)
    repeated Coordinates vertices = 3;

    // Minimum altitude for this zone
    float altitude_meters_min = 4;

    // Maximum altitude for this zone
    float altitude_meters_max = 5;

    // Start datetime for this zone
    google.protobuf.Timestamp time_start = 6;

    // End datetime for this zone
    google.protobuf.Timestamp time_end = 7;
}

// Update No Fly Zones Request object
message UpdateZonesRequest {
    // Nodes to update
    repeated Zone zones = 1;
}

// Update flight paths
message UpdateFlightPathRequest {
    // The unique identifier for the flight
    optional string flight_identifier = 1;

    // The unique identifier for the aircraft
    optional string aircraft_identifier = 2;

    // If this is a simulated flight
    bool simulated = 3;

    // The type of aircraft
    AircraftType aircraft_type = 4;

    // The path of the aircraft
    repeated PointZ path = 5;

    // The planned start time of the flight
    google.protobuf.Timestamp timestamp_start = 6;

    // The planned end time of the flight
    google.protobuf.Timestamp timestamp_end = 7;
}

// Best Path Request object
message BestPathRequest {
    // Start Node Identifier
    string origin_identifier = 1;

    // End Node (Vertiport UUID)
    string target_identifier = 2;

    // Routing Type (Vertiport or Aircraft Allowed)
    NodeType origin_type = 3;

    // Routing Type (Vertiport or Aircraft Allowed)
    NodeType target_type = 4;

    // Time of departure
    google.protobuf.Timestamp time_start = 5;

    // Time of arrival
    google.protobuf.Timestamp time_end = 6;

    // Number of paths to return
    int32 limit = 7;
}

// Check Intersection Request object
message CheckIntersectionRequest {
    // Start Node Identifier
    string origin_identifier = 1;

    // End Node (Vertiport UUID)
    string target_identifier = 2;

    // The path to check
    repeated PointZ path = 3;

    // Time of departure
    google.protobuf.Timestamp time_start = 4;

    // Time of arrival
    google.protobuf.Timestamp time_end = 5;
}

// Check Intersection Response object
message CheckIntersectionResponse {
    // True if the path intersects a zone or previous plan
    bool intersects = 1;
}

/// Geospatial Point with Altitude
message PointZ {
    // Latitude
    double latitude = 1;

    // Longitude
    double longitude = 2;

    // Altitude
    float altitude_meters = 3;
}

/// A node in a path
message PathNode {
    // Path Node Index
    int32 index = 1;

    // Node Type (Vertiport or Waypoint)
    NodeType node_type = 2;

    // Node Identifier
    string identifier = 3;

    // Location
    PointZ geom = 4;
}

/// A path between nodes
message Path {
    // The nodes in this path
    repeated PathNode path = 1;

    // Total distance of this path
    float distance_meters = 2;
}

// Best Path Response object
message BestPathResponse {
    // Best paths
    repeated Path paths = 1;
}

// Get Flights Request object
message GetFlightsRequest {
    // GPS Rectangular Window Corner Min X
    double window_min_x = 1;

    // GPS Rectangular Window Corner Min Y
    double window_min_y = 2;

    // GPS Rectangular Window Corner Max X
    double window_max_x = 3;

    // GPS Rectangular Window Corner Max Y
    double window_max_y = 4;

    // Time window start
    google.protobuf.Timestamp time_start = 5;

    // Time window end
    google.protobuf.Timestamp time_end = 6;
}

// Timestamped position of an aircraft
message TimePosition {
    // Aircraft Position
    PointZ position = 1;

    // Timestamp
    google.protobuf.Timestamp timestamp = 2;
}

// Operational Status of an aircraft
// Will be replaced by OperationalStatus enum
//  in crate::types::OperationalStatus
enum OperationalStatus {
    // will be replaced
    OPERATIONAL_STATUS = 0;
}

// Aircraft Type
// Will be replaced by AircraftType enum
//  in crate::types::AircraftType
enum AircraftType {
    // will be replaced
    AIRCRAFT_TYPE = 0;
}

// The state of the aircraft including position, status, and velocity
message AircraftState {
    // The timestamp of the state
    google.protobuf.Timestamp timestamp = 1;

    // The operational status of the aircraft
    OperationalStatus status = 2;

    // The position of the aircraft
    PointZ position = 3;

    // The track angle of the aircraft
    float track_angle_degrees = 4;

    // The ground speed of the aircraft
    float ground_speed_mps = 5;

    // The vertical speed of the aircraft
    float vertical_speed_mps = 6;
}

// Aircraft Flight Information
message Flight {
    // Flight identifier, if on assigned flight
    optional string session_id = 1;

    // Aircraft identifier
    optional string aircraft_id = 2;

    // If this is a simulated aircraft
    bool simulated = 3;

    // The timestamped positions of the aircraft
    repeated TimePosition positions = 4;

    // The type of aircraft
    AircraftType aircraft_type = 5;

    // The state of the aircraft
    AircraftState state = 6;
}

// Get Flights Response object
message GetFlightsResponse {
    // Flights in the requested zone
    repeated Flight flights = 1;
}

// // Nearest Neighbor Request object
// message NearestNeighborRequest {
//     // Start Node - UUID for Vertiports, identifiers for Aircraft
//     string start_node_id = 1;

//     // Start Node Type (Vertiport or Aircraft Allowed)
//     NodeType start_type = 2;

//     // End Node Type (Vertiport or Aircraft Allowed)
//     NodeType end_type = 3;

//     // Limit to this many results
//     int32 limit = 4;

//     // Limit to this range
//     float max_range_meters = 5;
// }

// // Distance to a node
// message DistanceTo {
//     // Vertiport or Aircraft ID
//     string identifier = 1;

//     // Vertiport or Aircraft Type
//     NodeType target_type = 2;

//     // Distance to vertiport
//     float distance_meters = 3;
// }

// // Nearest Vertiports Request object
// message NearestNeighborResponse {

//     // Distances to nearby objects
//     repeated DistanceTo distances = 1;
// }
